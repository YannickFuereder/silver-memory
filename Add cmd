[Command("add")]
        [Summary("Adds a movie or series to the database")]
        public async Task Add([Remainder] string input)
        {
            if (Tools.ValidateSQLValues(input, Context.Channel))
            {
                return;
            }

            if (!Tools.IsModerator(Context.User))
            {
                Tools.Embedbuilder("You have to be a moderator to use this command", Color.DarkRed,Context.Channel);
                return;
            }

            string[] content = input.Split(",");

            if (content[0].ToLower() == "movie" || content[0].ToLower() == "series")
            {
                content[1] = content[1].Trim();

                if (Tools.IsAvailable(content[1]))
                {
                    Tools.Embedbuilder("This movie/series is already in the library", Color.DarkRed,Context.Channel);
                    return;
                }
                else
                {
                    content[1] = content[1].Trim();

                    var cmd = Program._con.CreateCommand();
                    cmd.CommandText = "select * from moviedata where movieName = 'null';";
                    var reader = await cmd.ExecuteReaderAsync();

                    if (reader.Read())
                    {
                        int id = (int)reader["id"];
                        reader.Close();
                        Tools.RunCommand($"update moviedata set movieName = '{content[1]}' where id = '{id}'; ");

                        if (content[0].ToLower() == "movie")
                        {
                            Tools.RunCommand($"update moviedata set type = '0' where movieName = '{content[1]}'; ");
                            await Context.Message.AddReactionAsync(new Emoji("✅"));
                            Tools.UpdateContentadded(Context.User);
                            return;
                        }
                        else if (content[0].ToLower() == "series")
                        {
                            Tools.RunCommand($"update moviedata set type = '1' where movieName = '{content[1]}'; ");
                            await Context.Message.AddReactionAsync(new Emoji("✅"));
                            Tools.UpdateContentadded(Context.User);
                            return;
                        }
                    }

                    reader.Close();

                    if (content[0].ToLower() == "movie")
                    {
                        Tools.RunCommand($"insert into moviedata (movieName, type) values ('{content[1]}', '{0}');");
                        await Context.Message.AddReactionAsync(new Emoji("✅"));
                        Tools.UpdateContentadded(Context.User);
                        return;
                    }
                    else if (content[0].ToLower() == "series")
                    {
                        Tools.RunCommand($"insert into moviedata (movieName, type) values ('{content[1]}', '{1}');");
                        await Context.Message.AddReactionAsync(new Emoji("✅"));
                        Tools.UpdateContentadded(Context.User);
                        return;
                    }
                }
            }

            content[0] = content[0].Trim();

            if (!Tools.IsAvailable(content[0]))
            {
                var cmd = Program._con.CreateCommand();
                cmd.CommandText = "select * from moviedata where id = '" + content[0] + "';";
                var reader = await cmd.ExecuteReaderAsync();

                if (reader.Read())
                {
                    content[0] = (string)reader["movieName"];
                    reader.Close();
                }
                else
                {
                    reader.Close();
                    Tools.Embedbuilder("This movie is not available.", Color.DarkRed, Context.Channel);
                    reader.Dispose();
                    cmd.Dispose();
                    return;
                }
            }
            content[1] = content[1].Replace(" ", "");

            if (content[1] == "age")
            {
                if (!int.TryParse(content[2], out int age))
                {
                    Tools.Embedbuilder("The age must be a number", Color.DarkRed, Context.Channel);
                    return;
                }

                if (age < 0 || age > 21)
                {
                    Tools.Embedbuilder("Age must be between 0 and 21", Color.DarkRed, Context.Channel);
                    return;
                }

                if (age == 0)
                {
                    age = 69;
                }

                Tools.RunCommand($"update moviedata set age = '{age}' where movieName = '{content[0]}'; ");
                await Context.Message.AddReactionAsync(new Emoji("✅"));
                Tools.UpdateContentadded(Context.User);
            }
            else if (content[1] == "description")
            {
                if (content[2] == "")
                {
                    Tools.Embedbuilder("Please provide a description", Color.DarkRed, Context.Channel);
                    return;
                }

                if (content[2].StartsWith(" "))
                {
                    content[2] = content[2].Remove(0, 1);
                }

                string description = content[2];

                if (content.Length > 2)
                {
                    for (int i = 3; i < content.Length; i++)
                    {
                        description += ", " + content[i];
                    }
                }

                if (description.Length > 300)
                {
                    Tools.Embedbuilder("Descritpion must be less than 300 charactars", Color.DarkRed, Context.Channel);
                    return;
                }

                Tools.RunCommand($"update moviedata set description = '{description}' where movieName = '{content[0]}'; ");
                await Context.Message.AddReactionAsync(new Emoji("✅"));
                Tools.UpdateContentadded(Context.User);
            }
            else if (content[1] == "genres")
            {
                Tools.RunCommand($"update moviedata set genres = '{content[2]}' where movieName = '{content[0]}'; ");
                await Context.Message.AddReactionAsync(new Emoji("✅"));
                Tools.UpdateContentadded(Context.User);
            }
            else if (content[1] == "releasedate" || content[1] == "rd")
            {
                if (int.TryParse(content[2], out int releasedate) && releasedate < DateTime.Now.Year + 1 && releasedate > 1888)
                {
                    Tools.RunCommand($"update moviedata set releaseDate = '{Convert.ToInt32(content[2])}' where movieName = '{content[0]}'; ");
                    await Context.Message.AddReactionAsync(new Emoji("✅"));
                    Tools.UpdateContentadded(Context.User);
                    return;
                }

                Tools.Embedbuilder("The releasedate must be a number between 1888 and " + DateTime.Now.Year, Color.DarkRed, Context.Channel);
            }
            else if (content[1] == "length")
            {
                if (int.TryParse(content[2], out int length) && length > 0)
                {
                    Tools.RunCommand($"update moviedata set movieLength = '{Convert.ToInt32(content[2])   }' where movieName = '{content[0]}'; ");
                    await Context.Message.AddReactionAsync(new Emoji("✅"));
                    Tools.UpdateContentadded(Context.User);
                    return;
                }

                Tools.Embedbuilder("The length must be a number greater than 0", Color.DarkRed, Context.Channel);
            }
            else if (content[1] == "image")
            {
                var attachments = Context.Message.Attachments;

                if (attachments.Count == 0)
                {
                    Tools.Embedbuilder("You have to attach a file", Color.Blue, Context.Channel);
                    return;
                }

                if (attachments.ElementAt(0).Filename.EndsWith(".png"))
                {
                    string fileurl = attachments.ElementAt(0).Url;

                    WebClient mywebclient = new WebClient();

                    byte[] ImageData = mywebclient.DownloadData(fileurl);

                    var cmd = Program._con.CreateCommand();
                    cmd.CommandText = $"update moviedata set image = @image where id = '{Tools.Getid(content[0])}';";

                    var blob = new MySqlParameter("@image", MySqlDbType.MediumBlob, ImageData.Length)
                    {
                        Value = ImageData
                    };

                    cmd.Parameters.Add(blob);

                    cmd.ExecuteNonQuery();

                    await Context.Message.AddReactionAsync(new Emoji("✅"));

                    Tools.UpdateContentadded(Context.User);

                    cmd.Dispose();
                }
                else
                {
                    Tools.Embedbuilder("The file has to be a png!", Color.Blue, Context.Channel);
                }
            }
            else if (content[1] == "id")
            {
                if (content[2].Length != 8)
                {
                    Tools.Embedbuilder("This is not a valid id", Color.DarkRed, Context.Channel);
                    return;
                }

                if (!int.TryParse(content[2], out int id))
                {
                    Tools.Embedbuilder("The id must be a number", Color.DarkRed, Context.Channel);
                    return;
                }

                Tools.RunCommand($"update moviedata set netflixid = '{id}' where movieName = '{content[0]}'; ");
                await Context.Message.AddReactionAsync(new Emoji("✅"));
                Tools.UpdateContentadded(Context.User);
            }
            else
            {
                Tools.Embedbuilder("Your are missing an operator", Color.DarkRed, Context.Channel);
            }
        }
